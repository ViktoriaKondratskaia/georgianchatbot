from email import message
from debugpy import connect
import telebot
from telebot import types
import sqlite3


level = 0
level5w = 0

bot = telebot.TeleBot(
    "5434878518:AAEbcqZpqITA_89lMNzuD16KWs9XdzNWRfs", parse_mode=None)

commands = {
    "start": "–ü—Ä–∏–≤–µ—Ç, —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞? "
    "–Ω–∞–ø–∏—à–∏ –î–∞/–Ω–µ—Ç:",
    "start2": "–ü—Ä–∏–≤–µ—Ç, —Ç—ã —É–∂–µ —É –Ω–∞—Å –±—ã–ª, –Ω–∞—á–Ω–µ–º —Å —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ —É—Ä–æ–≤–Ω—è? "
    "–Ω–∞–ø–∏—à–∏ –î–∞/–Ω–µ—Ç:",
    "help": "To start learning you should "
    "add words to your dictionary by typing /addwords.\n"}

levels = [
    {"send": "–í–æ—Ç —Ç–µ–±–µ –Ω–æ–≤–∞—è –±—É–∫–≤–∞ '·Éò', –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∑–≤—É—á–∏—Ç –∫–∞–∫ '–∏' ", "expected_answer": "·Éò"},
    {"send": "–í–æ—Ç —Ç–µ–±–µ –Ω–æ–≤–∞—è –±—É–∫–≤–∞ '·Éê', –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∑–≤—É—á–∏—Ç –∫–∞–∫ '–∞' ", "expected_answer": "·Éê"},
    {"send": "–í–æ—Ç —Ç–µ–±–µ –Ω–æ–≤–∞—è –±—É–∫–≤–∞ '·Éó', –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∑–≤—É—á–∏—Ç –∫–∞–∫ '—Ç'  ", "expected_answer": "·Éó"},
    {"send": "–í–æ—Ç —Ç–µ–±–µ –Ω–æ–≤–∞—è –±—É–∫–≤–∞ '·É°', –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∑–≤—É—á–∏—Ç –∫–∞–∫ 'c'  ", "expected_answer": "·É°"},
    {"send": "–í–æ—Ç —Ç–µ–±–µ –Ω–æ–≤–∞—è –±—É–∫–≤–∞ '·ÉÆ', –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∑–≤—É—á–∏—Ç –∫–∞–∫ '—Ö'  ", "expected_answer": "·ÉÆ"}
]

levels_library_letters = [
    {"level": "1 —É—Ä–æ–≤–µ–Ω—å", "letters": {"–∏": '·Éò'}  },
    {"level": "2 —É—Ä–æ–≤–µ–Ω—å", "letters": {"–∞":	'·Éê'}  },
    {"level": "3 —É—Ä–æ–≤–µ–Ω—å", "letters": {"—Ç": '·Éó'}  },
    {"level": "4 —É—Ä–æ–≤–µ–Ω—å", "letters": {"—Å": '·É°'}  },
    {"level": "5 —É—Ä–æ–≤–µ–Ω—å", "letters": {"—Ö": '·ÉÆ'}  },
    {"level": "6 —É—Ä–æ–≤–µ–Ω—å", "letters": {"—Ö": '·ÉÆ'}  }
]

levels_words = [
    {"send": "–ù–∞ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–º '—Ñ–∏–∞–ª–∫–∞' —ç—Ç–æ '·Éò·Éê' –∏ –∑–≤—É—á–∏—Ç –∫–∞–∫ '–∏–∞' ", "expected_answer": "·Éò·Éê"},
    {"send": "–ù–∞ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–º '–ø–∞–ª–µ—Ü' —ç—Ç–æ '·Éó·Éò·Éó·Éò' –∏ –∑–≤—É—á–∏—Ç –∫–∞–∫ '—Ç–∏—Ç–∏' ", "expected_answer": "·Éó·Éò·Éó·Éò"},
    {"send": "–ù–∞ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–º '—á–∞—Å—ã' —ç—Ç–æ '·É°·Éê·Éê·Éó·Éò' –∏ –∑–≤—É—á–∏—Ç –∫–∞–∫ '—Å–∞-–∞-—Ç–∏' ", "expected_answer": "·É°·Éê·Éê·Éó·Éò"},
    {"send": "–ù–∞ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–º '–∫–æ–∑–∞' —ç—Ç–æ '·Éó·ÉÆ·Éê' –∏ –∑–≤—É—á–∏—Ç –∫–∞–∫ '—Ç–∫—Ö–∞' ", "expected_answer": "·Éó·ÉÆ·Éê"},
    {"send": "–ù–∞ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–º '–≥–ª–∏–Ω–∞' —ç—Ç–æ '·Éó·Éò·ÉÆ·Éê' –∏ –∑–≤—É—á–∏—Ç –∫–∞–∫ '—Ç–∏-–∫—Ö–∞' ", "expected_answer": "·Éó·Éò·ÉÆ·Éê"}
]


levels_library_words_to_check = [
    {"level": "1 —É—Ä–æ–≤–µ–Ω—å", "word": {"—Ñ–∏–∞–ª–∫–∞": '·Éò·Éê'}  },
    {"level": "2 —É—Ä–æ–≤–µ–Ω—å", "word": {"":	'·Éê'}  },
    {"level": "3 —É—Ä–æ–≤–µ–Ω—å", "word": {"": '·Éó'}  },
    {"level": "4 —É—Ä–æ–≤–µ–Ω—å", "word": {"": '·É°'}  }
]




# Keyboards

markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
itembtna = types.KeyboardButton('·Éò')
itembtnv = types.KeyboardButton('·Éê')
itembtnc = types.KeyboardButton('·Éó')
itembtnd = types.KeyboardButton('·É°')
itembtne = types.KeyboardButton('·ÉÆ')
markup.row(itembtna, itembtnv)
markup.row(itembtnc, itembtnd, itembtne)


# markup_next = types.ReplyKeyboardMarkup(one_time_keyboard=True)
# itembtnazad = types.KeyboardButton('–ù–∞–ø–æ–º–Ω–∏ –ø–æ–ø–æ–∑–∂–µ')
# itembtnvpered = types.KeyboardButton('–¥–∞')
# markup_next.row(itembtnazad, itembtnvpered)


markup_privet = telebot.types.InlineKeyboardMarkup(row_width=2)
markup_privet.add(telebot.types.InlineKeyboardButton(text='–î–∞–≤–∞–π –ø–æ–ø–æ–∑–∂–µ',callback_data='–Ω–µ—Ç'))
markup_privet.add(telebot.types.InlineKeyboardButton(text='–î–∞, –Ω–∞—á–∏–Ω–∞–µ–º!üòé',callback_data='–¥–∞'))


markup_next_bukva = telebot.types.InlineKeyboardMarkup(row_width=2)
markup_next_bukva.add(telebot.types.InlineKeyboardButton(text='–î–∞–≤–∞–π –ø–æ–ø–æ–∑–∂–µ',callback_data='–Ω–µ—Ç'))
markup_next_bukva.add(telebot.types.InlineKeyboardButton(text='–î–∞, –∏–¥–µ–º –¥–∞–ª—å—à–µ!üëâ',callback_data='–¥–∞ –∫–∏–¥–∞–π –±—É–∫–≤—ã'))

markup_next_text = telebot.types.InlineKeyboardMarkup(row_width=2)
markup_next_text.add(telebot.types.InlineKeyboardButton(text='–î–∞–≤–∞–π –ø–æ–ø–æ–∑–∂–µ',callback_data='–Ω–µ—Ç'))
markup_next_text.add(telebot.types.InlineKeyboardButton(text='–î–∞, –∏–¥–µ–º –¥–∞–ª—å—à–µ!üëâ',callback_data='–¥–∞ –∫–∏–¥–∞–π —Ç–µ–∫—Å—Ç'))

markup_next_proverka = telebot.types.InlineKeyboardMarkup(row_width=2)
markup_next_proverka.add(telebot.types.InlineKeyboardButton(text='–î–∞–≤–∞–π –ø–æ–ø–æ–∑–∂–µ',callback_data='–Ω–µ—Ç'))
markup_next_proverka.add(telebot.types.InlineKeyboardButton(text='–î–∞, –∏–¥–µ–º –¥–∞–ª—å—à–µ!üëâ',callback_data='–¥–∞ –∫–∏–¥–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É'))

markup_next_words5bukv = telebot.types.InlineKeyboardMarkup(row_width=2)
markup_next_words5bukv.add(telebot.types.InlineKeyboardButton(text='–î–∞–≤–∞–π –ø–æ–ø–æ–∑–∂–µ',callback_data='–Ω–µ—Ç'))
markup_next_words5bukv.add(telebot.types.InlineKeyboardButton(text='–î–∞, —É—á–∏–º —Å–ª–æ–≤–∞!üëâ',callback_data='–¥–∞ –∫–∏–¥–∞–π —Å–ª–æ–≤–∞ –∏–∑ 5 –±—É–∫–≤'))


#Database


# @bot.message_handler(commands=['start'])
# def welcome(message):
#     mesg = bot.send_message(message.chat.id, commands["start"])
#     bot.register_next_step_handler(mesg, receive_da_start)

@bot.message_handler(commands=['start'])
def welcome(message):
    global level

    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS users_id_lvl(
        id INTEGER, level INTEGER, level2 INTEGER
        )""")

    connect.commit()

    id_to_check = message.chat.id
    cursor.execute(f"SELECT id FROM users_id_lvl WHERE id = {id_to_check}")
    data = cursor.fetchone()
    if data is None:
        user_id = message.chat.id
        level = 0
        cursor.execute("INSERT INTO users_id_lvl (id,level) VALUES(?,?);",(user_id,level))
        connect.commit()
        
        # mesg = bot.send_message(message.chat.id, commands["start"])
        bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å?üëã", reply_markup=markup_privet)
        # bot.register_next_step_handler(mesg, receive_da_start)

    else:
        id = message.chat.id
        cursor.execute("SELECT * FROM users_id_lvl WHERE id=?", (id,))
        user_data = cursor.fetchone()
        level = user_data[1]
        print(level)
        
        mesg = bot.send_message(message.chat.id, commands["start2"], reply_markup=markup_next_bukva)
        bot.register_next_step_handler(mesg, callback2)


@bot.message_handler(commands=['delete'])
def delete(message):
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()

    id_to_delete = message.chat.id
    cursor.execute(f"DELETE FROM users_id_lvl WHERE id = {id_to_delete}")
    connect.commit()
    bot.send_message(message.chat.id, "–¢—ã —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")


# def receive_da_start(message):
#     print('receivedastra')
#     if message.text == "–¥–∞":
#         mesg = bot.send_message(message.chat.id, "–û–ª–∏—á–Ω–æ, –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –≥—Ä—É–∑–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ç–µ–∫—Å—Ç—ã, –∏ —Å–ª–æ–≤–∞, –∑–∞–ø–æ–º–∏–Ω–∞–π!, –ü–∏—à–∏ '–¥–∞' –µ—Å–ª–∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ")
#         bot.send_message(message.chat.id, "–ò–¥—ë–º –¥–∞–ª—å—à–µ?", reply_markup=markup)
#         bot.register_next_step_handler(mesg, send_task)

@bot.callback_query_handler(func=lambda call: call.data == "–¥–∞")
def callback(call):
    if call.message:
        if call.data == '–¥–∞':
            print('callaback')
            mesg = bot.send_message(call.message.chat.id,'–û–ª–∏—á–Ω–æ, –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –≥—Ä—É–∑–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ç–µ–∫—Å—Ç—ã, –∏ —Å–ª–æ–≤–∞, –∑–∞–ø–æ–º–∏–Ω–∞–π!')
            # bot.register_next_step_handler(mesg, send_task)
            bot.send_message(call.message.chat.id,'–ï—Å–ª–∏ –≤–∏–¥–∏—à—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≥–æ—Ç–æ–≤ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ, –∂–º–∏ "–ò–¥—ë–º –¥–∞–ª—å—à–µ"',reply_markup=markup_next_bukva)

            

# @bot.callback_query_handler(func=lambda call: call.data == "–Ω–µ—Ç")
# def callback(call):
#     if call.message:
#         if call.data == '–Ω–µ—Ç':
#             print('callaback2')
#             mesg = bot.send_message(call.message.chat.id,'–û—Ç–ª—á–∏–Ω–æ –ª–æ–≤–∏ –±—É–∫–≤—ã')
#             bot.register_next_step_handler(mesg, send_task)
#             bot.send_message(call.message.chat.id,'–≤–æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞',reply_markup=markup_next2)            
        

@bot.callback_query_handler(func=lambda call: call.data == "–¥–∞ –∫–∏–¥–∞–π –±—É–∫–≤—ã")
def callback2(call):
    if call.message:
        if call.data == '–¥–∞ –∫–∏–¥–∞–π –±—É–∫–≤—ã':
            sms = levels[level]["send"]
            msg = bot.send_message(call.message.chat.id, sms)
            bot.send_message(call.message.chat.id,"–ñ–º–∏ –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–π –±—É–∫–≤–æ–π",reply_markup=markup_next_text)
            bot.register_next_step_handler(msg, send_task2)
            

@bot.callback_query_handler(func=lambda call: call.data == "–¥–∞ –∫–∏–¥–∞–π —Ç–µ–∫—Å—Ç")
def send_task2(call):
    if call.message:
        if call.data == '–¥–∞ –∫–∏–¥–∞–π —Ç–µ–∫—Å—Ç':
            text = "–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞ —á—Ç–æ –¥–µ–ª–∞–µ—à—å —Å—É—á–∫–∞"
            text = text.split()
            sms = None

            for i in range(len(text)):
                for rus_letter in levels_library_letters[level]["letters"]:
                    geo_letter = levels_library_letters[level]["letters"][rus_letter]
                    text[i] = text[i].replace(rus_letter,geo_letter)
            sms = " ".join(text)

            msg = bot.send_message(call.message.chat.id,sms)
            bot.send_message(call.message.chat.id,"–ñ–º–∏ –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –ø—Ä–æ–≤–µ—Ä–∫—É",reply_markup=markup_next_proverka)
            bot.register_next_step_handler(msg,proverka2)


@bot.callback_query_handler(func=lambda call: call.data == "–¥–∞ –∫–∏–¥–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É")
def proverka2(call):
    global level
    if call.message:
        if call.data == '–¥–∞ –∫–∏–¥–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É':
            for letter in levels_library_letters[level]["letters"]:
                message_s_bukva = f"–ö–∞–∫–æ–π –≥—Ä—É–∑–∏–Ω—Å–∫–æ–π –±—É–∫–≤–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç, —Ä—É—Å—Å–∫–∞—è {letter}"
                msg = bot.send_message(call.message.chat.id, message_s_bukva)
                bot.register_next_step_handler(msg, check_otvet2)
                bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏", reply_markup=markup)




# def send_task2(message):
#     if message.text == "–¥–∞":

#         text = "–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞ —á—Ç–æ –¥–µ–ª–∞–µ—à—å —Å—É—á–∫–∞"
#         text = text.split()
#         sms = None

#         for i in range(len(text)):
#             for rus_letter in levels_library_letters[level]["letters"]:
#                 geo_letter = levels_library_letters[level]["letters"][rus_letter]
#                 text[i] = text[i].replace(rus_letter,geo_letter)
#         sms = " ".join(text)

#         msg = bot.send_message(message.chat.id,sms)
#         bot.send_message(message.chat.id,"–ü–∏—à–∏ –¥–∞ –µ—Å–ª–∏ –∏–¥–µ–º –¥–∞–ª—å—à–µ")
#         bot.register_next_step_handler(msg,proverka2)

#     else:
#         bot.send_message(message.chat.id, "Davai eshe okey")
#         send_task(message)





# def send_task(message):
#             print('send_task') 
#             sms = levels[level]["send"]
#             msg = bot.send_message(message.chat.id, sms)
#             bot.send_message(message.chat.id,"–ü–∏—à–∏ –¥–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–π –±—É–∫–≤–æ–π")
#             bot.register_next_step_handler(msg, send_task2)



#–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –≥—Ä—É–∑–∏–Ω—Å–∫–∏–π - 2 —Ñ—É–Ω–∫—Ü–∏–∏

# def proverka2(message):
#     global level

#     for letter in levels_library_letters[level]["letters"]:
#         message_s_bukva = f"–ö–∞–∫–æ–π –≥—Ä—É–∑–∏–Ω—Å–∫–æ–π –±—É–∫–≤–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç, —Ä—É—Å—Å–∫–∞—è {letter}"
#         msg = bot.send_message(message.chat.id, message_s_bukva)
#         bot.register_next_step_handler(msg, check_otvet2)
#         bot.send_message(message.chat.id, "–ù–∞–∂–º–∏", reply_markup=markup)
        
def check_otvet2(message):
    global level
    if message.text == levels[level]["expected_answer"]:
        level = level + 1
        # level2 = ("level",)
        level2 = str(level)
        user_id = message.chat.id
         # Send to database —Åurrent level
        connect = sqlite3.connect('users.db')
        cursor = connect.cursor()

        # cursor.execute("INSERT INTO users_id_lvl (level2) VALUES(?);",(level2))
        cursor.execute("UPDATE users_id_lvl SET level=? WHERE id=?",(level2, user_id))
        
        connect.commit()

        if level < 5:
            bot.send_message(message.chat.id, "–í–µ—Ä–Ω–æ, –º–æ–ª–æ–¥–µ—Ü!",reply_markup=markup_next_bukva)
        if level == 5:
            msg = bot.send_message(message.chat.id, "–í–µ—Ä–Ω–æ, –º–æ–ª–æ–¥–µ—Ü! –¢—ã —É–∂–µ –≤—ã—É—á–∏–ª 5 –±—É–∫–≤, –¥–∞–≤–∞–π –≤—ã—É—á–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤",reply_markup=markup_next_words5bukv)
        

    else:
        msg = bot.send_message(message.chat.id, "–í–æ—Ç –∏ –Ω–µ—Ç, –¥–∞–≤–∞–π –µ—â–µ —Ä–∞–∑",reply_markup=markup)
        bot.register_next_step_handler(msg, check_otvet2)      


@bot.callback_query_handler(func=lambda call: call.data == "–¥–∞ –∫–∏–¥–∞–π —Å–ª–æ–≤–∞ –∏–∑ 5 –±—É–∫–≤")
def words5bukv(call):
    global level5w
    if call.message:
        if call.data == '–¥–∞ –∫–∏–¥–∞–π —Å–ª–æ–≤–∞ –∏–∑ 5 –±—É–∫–≤':
            if level5w < 5:
                sms = levels_words[level5w]["send"]
                msg = bot.send_message(call.message.chat.id, sms)
                level5w = level5w + 1
                bot.send_message(call.message.chat.id,"–ñ–º–∏ –¥–∞–ª—å—à–µ, —É—á–∏–º —Å–ª–æ–≤–∞ –Ω–∞ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–º",reply_markup=markup_next_words5bukv)
                bot.register_next_step_handler(msg, send_task2)
            else:
                bot.send_message(call.message.chat.id,"–û—Ç–ª–∏—á–Ω–æ —Ç—ã –≤—ã—É—á–∏–ª —á–∞—Å—Ç—å –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –∏—Ö",reply_markup=markup_next_words5bukv)




#–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –≥—Ä—É–∑–∏–Ω—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π - 2 —Ñ—É–Ω–∫—Ü–∏–∏ 

# def proverka(message):
#     global level

#     for letter in levels_library_letters[level]["letters"]:
#         geor_letter = levels_library_letters[level]["letters"][letter]

#         message_s_bukva = f"–ö–∞–∫–æ–π —Ä—É—Å—Å–∫–æ–π –±—É–∫–≤–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç, –≥—Ä—É–∑–∏–Ω—Å–∫–∞—è {geor_letter}"
#         msg = bot.send_message(message.chat.id, message_s_bukva)
#         bot.register_next_step_handler(msg, check_otvet)
        

# def check_otvet(message):
#     global level
#     if message.text == levels[level]["expected_answer"]:
#         level = level + 1
#         bot.send_message(message.chat.id, "–í–µ—Ä–Ω–æ, –º–æ–ª–æ–¥–µ—Ü!")
#         send_task(message)
        

#     else:
#         msg = bot.send_message(message.chat.id, "Davai eshe")
#         bot.register_next_step_handler(msg, check_otvet)

# def receive_answer(message):
#     global level
#     if message.text == levels[level]["expected_answer"]:
#         send_task(message)
#         level = level + 1 
#     else:
#         msg = bot.send_message(message.chat.id, "Davai eshe")
#         bot.register_next_step_handler(msg, receive_answer)


# def answer_check_letter (message):
#     global level
#     if message.text == levels[level]["expected_answer"]:
#         level = level + 1
#         answer_check_letter(message)
#     else:
#         msg = bot.send_message(message.chat.id, "Davai eshe")
#         bot.register_next_step_handler(msg, answer_check_letter)




bot.infinity_polling()